
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract magazin {

    uint32 public timestamp;

    string[] public myArr = ["Петя", "Лёша", "Егор"];



    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
        timestamp = now;
    }

    modifier checkOwnerAndAccept {

		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    function deleteOchered() public checkOwnerAndAccept returns(string[]) {
        
        uint count = myArr.length;

        for (uint i = 0; i < count-1; i++){
            myArr[i] = myArr[i+1];
        }
        delete myArr[count-1];
        count--;
        myArr.pop();
        return myArr;
    }

    function addOchered(string value) public checkOwnerAndAccept{

        myArr.push(value);
        
    }

}
